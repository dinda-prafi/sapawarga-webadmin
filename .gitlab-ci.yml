stages:
  - versioning
  - code_quality
  - build
  - test
  - release
  - deploy

# versioning:
#   image: alpine:latest
#   stage: versioning
#   only:
#     - branches
#   before_script:
#     - apk add git
#   script:
#     - export VERSION=$(git describe)
#     - echo $VERSION
#     - echo $VERSION > version
#   artifacts:
#     paths:
#       - version
# 
# code_quality:
#   image: docker:stable
#   stage: code_quality
#   only:
#     - branches
#   services:
#     - docker:stable-dind
#   variables:
#     DOCKER_DRIVER: overlay2
#   dependencies: 
#     - versioning
#   before_script:
#     - export VERSION=$(cat ./version)
#   script:
#     - docker run
#         --env SOURCE_CODE=$PWD
#         --env CONTAINER_TIMEOUT_SECONDS=3600
#         --env CODECLIMATE_DEBUG=1
#         --volume $PWD:/code
#         --volume /var/run/docker.sock:/var/run/docker.sock
#         "registry.gitlab.com/gitlab-org/security-products/codequality:11-8-stable" /code
#   artifacts:
#     paths: [gl-code-quality-report.json]
#     reports:
#       codequality: gl-code-quality-report.json
#     expire_in: 1 week

# build_dev:
#   image: docker:stable
#   stage: build
#   only:
#     - branches
#   services:
#     - docker:dind
#   variables:
#     DOCKER_DRIVER: overlay2
#   dependencies: 
#     - versioning
#   before_script:
#     - export VERSION=$(cat ./version)
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
#     - pip install docker-compose
#   script:
#     - docker-compose -f docker-compose.dev.yml build
#     - docker images
#     - docker-compose -f docker-compose.dev.yml push

# test_webadmin:
#   image: docker:stable
#   stage: test
#   only:
#     - branches
#   services:
#     - docker:dind
#   dependencies: 
#     - versioning
#   before_script:
#     - export VERSION=$(cat ./version)
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
#     - pip install docker-compose
#   script:
#     - docker-compose -f docker-compose.dev.yml pull
#     - docker images
#     - COMPOSE_HTTP_TIMEOUT=500 docker-compose -f docker-compose.dev.yml up -d
#     - sleep 60
#     - docker ps
#     - docker-compose -f docker-compose.dev.yml exec -T app npm run lint
#     - docker-compose -f docker-compose.dev.yml exec -T app npm run test:unit

# release_all:
#   image: docker:stable
#   stage: release
#   services:
#     - docker:dind
#   only:
#     - master
#   dependencies: 
#     - versioning
#   before_script:
#     - export VERSION=$(cat ./version)
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
#     - pip install docker-compose
#   script:
#     - docker-compose -f docker-compose.dev.yml pull
#     - docker images
#     - docker push registry.gitlab.com/jdsteam/sapa-warga/sapawarga-webadmin:${VERSION}

# deploy_staging:
#   image: docker:stable
#   stage: deploy
#   only:
#     - master
#   dependencies: 
#     - versioning
#   before_script:
#     - export VERSION=$(cat ./version)
#     - 'which ssh-agent || ( apk update && apk add openssh-client )'
#     - mkdir -p ~/.ssh
#     - eval $(ssh-agent -s)
#     - chmod 400 $SSH_STAGING_KEY_PRIVATE
#     - ssh-add $SSH_STAGING_KEY_PRIVATE
#   script:
#     - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME}@${STAGING_HOST} "export VERSION=${VERSION} && cd /home/development/projects/sapawarga-webadmin && sudo git pull && sudo docker system prune -f && sudo -E docker-compose pull && sudo -E docker-compose down && sudo -E docker-compose up -d"
#     - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME}@${STAGING_HOST} "sudo docker ps"
# 

deploy_staging_aws:
  image: docker:stable
  stage: deploy
  only:
    - master
  # dependencies: 
  #   - versioning
  before_script:
    - export VERSION=v0.1-76-g854eab1
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - chmod 400 $SSH_STAGING_KEY_PRIVATE_AWS
    - ssh-add $SSH_STAGING_KEY_PRIVATE_AWS
  script:
    - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME_AWS}@${STAGING_HOST_AWS} "export VERSION=${VERSION} && cd /home/ubuntu/projects/sapawarga-webadmin && git pull && docker images prune -a && sudo -E docker-compose -f docker-compose.yml pull && sudo -E docker-compose -f docker-compose.yml down && sudo -E docker-compose -f docker-compose.yml up -d"
    - ssh -o StrictHostKeyChecking=no ${SSH_STAGING_USERNAME_AWS}@${STAGING_HOST_AWS} "sudo docker ps"
# 
# deploy_prod_gke:
#   stage: deploy
#   image: dtzar/helm-kubectl
#   only:
#     - master
#   dependencies: 
#     - versioning
#   before_script:
#     - export VERSION=$(cat ./version)
#     - kubectl config set-cluster k8s --server="${KUBERNETES_SERVER}"
#     - kubectl config set clusters.k8s.certificate-authority-data ${KUBERNETES_CERTIFICATE_AUTHORITY_DATA}
#     - kubectl config set-credentials gitlab --token="${KUBERNETES_USER_TOKEN}"
#     - kubectl config set-context default --cluster=k8s --user=gitlab
#     - kubectl config use-context default
#     - kubectl cluster-info
#   script:
#     - cp kubernetes/webadmin-variables-sample.yaml kubernetes/webadmin-variables.yaml
#     - sed -i "s/%VUE_APP_VERSION%/${VERSION}/g" kubernetes/webadmin-variables.yaml
#     - sed -i "s/%VUE_APP_BASE_API%/${VUE_APP_BASE_API}/g" kubernetes/webadmin-variables.yaml
#     - sed -i "s/%dockerconfigjson%/${dockerconfigjson}/g" kubernetes/webadmin-variables.yaml
#     - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/webadmin-deployment.yaml
#     - kubectl apply -f kubernetes/webadmin-variables.yaml
#         -f kubernetes/webadmin-deployment.yaml
#         -f kubernetes/webadmin-service.yaml

# deploy_prod_eks:
#   stage: deploy
#   image: dtzar/helm-kubectl
#   only:
#     - master
#   dependencies: 
#     - versioning
#   before_script:
#     - export VERSION=$(cat ./version)
#     - kubectl config set-cluster k8s --server="${EKS_SERVER}"
#     - kubectl config set clusters.k8s.certificate-authority-data ${EKS_CA}
#     - kubectl config set-credentials gitlab --token="${EKS_TOKEN}"
#     - kubectl config set-context default --cluster=k8s --user=gitlab
#     - kubectl config use-context default
#     - kubectl cluster-info
#   script:
#     - cp kubernetes/webadmin-variables-sample.yaml kubernetes/webadmin-variables.yaml
#     - sed -i "s/%VUE_APP_VERSION%/${VERSION}/g" kubernetes/webadmin-variables.yaml
#     - sed -i "s/%VUE_APP_BASE_API%/${EKS_VUE_APP_BASE_API}/g" kubernetes/webadmin-variables.yaml
#     - sed -i "s/%dockerconfigjson%/${dockerconfigjson}/g" kubernetes/webadmin-variables.yaml
#     - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/webadmin-deployment.yaml
#     - kubectl apply -f kubernetes/webadmin-variables.yaml
#         -f kubernetes/webadmin-deployment.yaml
#         -f kubernetes/webadmin-service.yaml